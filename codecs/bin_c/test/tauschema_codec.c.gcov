        -:    0:Source:/home/peeter/Projektid/SchemaTools/codecs/bin_c/tauschema_codec.c
        -:    0:Graph:bin_c/tauschema_codec.gcno
        -:    0:Data:bin_c/tauschema_codec.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: * TauSchema Codec C
        -:    3: *
        -:    4: * All rights reserved.
        -:    5: *
        -:    6: * Redistribution and use in source and binary forms, with or without
        -:    7: * modification, are permitted provided that the following conditions are met:
        -:    8: *
        -:    9: * 1. Redistributions of source code must retain the above copyright notice,
        -:   10: *    this list of conditions and the following disclaimer.
        -:   11: * 2. Redistributions in binary form must reproduce the above copyright
        -:   12: *    notice, this list of conditions and the following disclaimer in the
        -:   13: *    documentation and/or other materials provided with the distribution.
        -:   14: * 3. Neither the name of author nor the names of
        -:   15: *    contributors may be used to endorse or promote products derived from
        -:   16: *    this software without specific prior written permission.
        -:   17: *
        -:   18: * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        -:   19: * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        -:   20: * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
        -:   21: * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
        -:   22: * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
        -:   23: * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
        -:   24: * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
        -:   25: * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
        -:   26: * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
        -:   27: * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
        -:   28: * POSSIBILITY OF SUCH DAMAGE.
        -:   29: *
        -:   30: */
        -:   31:
        -:   32:
        -:   33:#include "tauschema_codec.h"
        -:   34:#include "string.h"
        -:   35:
        -:   36:
        -:   37:/**
        -:   38: * Runtime formatting of the buffer.
        -:   39: * When at the root leve, end of scope is found, it means
        -:   40: * no more items placed into buffer.
        -:   41: *
        -:   42: * @arg buf : uint8_t* - pointer to the buffer
        -:   43: */
       18:   44:void tausch_format_buf( uint8_t *buf )
        -:   45:{
       18:   46:    buf[0] = 0x07; // EOF marker END with tag > 0
       18:   47:}
        -:   48:
        -:   49:/**
        -:   50: * Test if the pointer pointing at buf on in the buf is EOF
        -:   51: *
        -:   52: * @arg buf : uint8_t* - pointer to the buffer
        -:   53: */
       39:   54:bool tausch_buf_is_eof( uint8_t *buf )
        -:   55:{
       39:   56:    return ( ((buf[0] & 3) == 0x03) && (buf[0] > 3) );
        -:   57:}
        -:   58:
        -:   59:/**
        -:   60: * Run-time initiation of the iterator
        -:   61: *
        -:   62: * @arg buf : uint8_t* - pointer to the buffer
        -:   63: * @arg size : size_t - amount of data in the buffer
        -:   64: */
       17:   65:void tausch_iter_init( tausch_iter_t *iter, uint8_t *buf, size_t size )
        -:   66:{
       17:   67:    tausch_iter_t tm = TAUSCH_ITER_INIT( buf, size );
       17:   68:    *iter = tm;
       17:   69:}
        -:   70:
        -:   71:/**
        -:   72: * Return true if iterator is ok false if it is broken
        -:   73: */
      667:   74:bool tausch_iter_is_ok( tausch_iter_t *iter )
        -:   75:{
      667:   76:	bool notok = false;
      667:   77:    notok |= iter->ebuf == NULL; // there is no buffer pointed
      667:   78:    notok |= iter->idx == NULL; // idx is pointing to nothing
      667:   79:    notok |= iter->idx >= iter->ebuf; // index is out of buffer or end of buffer
      667:   80:    notok |= iter->next == NULL; // next is pointing to nothing
      667:   81:    notok |= iter->next > iter->ebuf; // next is pointing out of buffer
     667*:   82:    notok |= (iter->next == iter->idx) && (iter->val != iter->next); // iter->val has incorrect value
      667:   83:    return ! notok;
        -:   84:}
        -:   85:
        -:   86:/**
        -:   87: * Return true if the iterator is complete
        -:   88: */
       77:   89:bool tausch_iter_is_complete( tausch_iter_t *iter )
        -:   90:{
        -:   91:    // we do not check if iter is ok here, because that would reduce dimensions
       77:   92:    return iter->val != iter->next;
        -:   93:}
        -:   94:
        -:   95:/**
        -:   96: * Return true if the value is null
        -:   97: */
        4:   98:bool tausch_iter_is_null( tausch_iter_t *iter )
        -:   99:{
        4:  100:    return iter->val == NULL;
        -:  101:}
        -:  102:
        -:  103:/**
        -:  104: * Return true if the iterator is clean for write
        -:  105: */
       12:  106:bool tausch_iter_is_clean( tausch_iter_t *iter )
        -:  107:{
      12*:  108:    if( ! tausch_iter_is_ok( iter ) ) return false;
      12*:  109:    return (iter->next == iter->idx) && (iter->val == iter->next);
        -:  110:}
        -:  111:
        -:  112:/**
        -:  113: * Return size of the stuffing when the iter is stuffing, otherwise 0
        -:  114: */
        6:  115:size_t tausch_iter_is_stuffing( tausch_iter_t *iter )
        -:  116:{
       6*:  117:    if( ! tausch_iter_is_ok( iter ) ) return 0;
        6:  118:    if( iter-> tag != 0 ) return 0;
        3:  119:    return iter->next - iter->idx;
        -:  120:}
        -:  121:
        -:  122:/**
        -:  123: * Decode from binary buffer the variable length unsigned integer
        -:  124: *
        -:  125: * @arg iter - the iterator from where to read
        -:  126: *
        -:  127: * @return the decoded tag value, or ~0 (all bits set) on failure
        -:  128: *
        -:  129: */
      201:  130:size_t tausch_decode_vluint( tausch_iter_t *iter )
        -:  131:{
      201:  132:    size_t rv = 0;
      201:  133:    size_t x = 0;
      201:  134:    uint32_t s = 0;
     201*:  135:    if( iter->next != iter->val ) return ~0;
        -:  136:	do
        -:  137:	{
     269*:  138:	    if( ! tausch_iter_is_ok( iter ) ) return ~0;
      269:  139:	    if( iter->next >= iter->ebuf )
        -:  140:	    {
        1:  141:	        iter->ebuf = NULL;
        1:  142:	        return ~0;
        -:  143:	    }
      268:  144:		x = (size_t)(*iter->next);
      268:  145:		if( (s+1) < (sizeof(size_t)*8) )
        -:  146:		{
        -:  147:			// we do not support bigger numbers for vluint
      268:  148:			rv |= (x & 0x7f) << s;
      268:  149:			s += 7;
        -:  150:		}
      268:  151:		iter->next += 1;
        -:  152:	}
      268:  153:	while( ((x & 0x80) == 0x80) && ( s < (sizeof(size_t)*8)) );
      200:  154:	iter->val = iter->next;
      200:  155:	return rv;
        -:  156:}
        -:  157:
        -:  158:/**
        -:  159: * Encode to binary buffer the variable length unsigned integer
        -:  160: *
        -:  161: * @arg iter - the iterator where towrite
        -:  162: * @arg val - the value to write
        -:  163: *
        -:  164: * @return true on success
        -:  165: * @return false on failure
        -:  166: */
       35:  167:bool tausch_encode_vluint( tausch_iter_t *iter, size_t val )
        -:  168:{
       35:  169:    size_t x = val;
       35:  170:    uint8_t b = 0;
      35*:  171:    if( tausch_iter_is_complete(iter) ) return false; // the iterator is complete already
        -:  172:    do
        -:  173:    {
      48*:  174:        if( ! tausch_iter_is_ok( iter ) ) return false;
       48:  175:        if( x & (~0x7f) )
       13:  176:            b = 0x80;
        -:  177:        else
       35:  178:            b = 0x00;
       48:  179:        b |= x & 0x7f;
       48:  180:        *(iter->next++) = b;
       48:  181:        x >>= 7;
        -:  182:    }
       48:  183:    while( x );
       35:  184:    iter->val = iter->next;
       35:  185:    return true;
        -:  186:}
        -:  187:
        -:  188:/**
        -:  189: * Calculate memory length of the resulting vluint
        -:  190: *
        -:  191: * @arg val - the value to encode
        -:  192: *
        -:  193: * @return number of bytes it would take
        -:  194: */
        7:  195:size_t tausch_vluint_len( size_t val )
        -:  196:{
        7:  197:    unsigned int *x = (unsigned int *)&val;
        7:  198:    size_t rv = 0; // now: rv is number of msbits zeroed
       14:  199:    for( int i = (sizeof(size_t)/sizeof(unsigned int)-1); i >= 0; i-- )
        -:  200:    {
       14:  201:        if( x[i] == 0 )
        -:  202:        {
        7:  203:            rv += 32;
        -:  204:        }
        -:  205:        else
        -:  206:        {
        7:  207:            rv += __builtin_clz( x[i] );
        7:  208:            break;
        -:  209:        }
        -:  210:    }
        7:  211:    rv = (sizeof(size_t)<<3) - rv; // now: rv is number of significant bits
        7:  212:    rv = (rv+6) / 7; // now: rv is number of bytes
        7:  213:    return rv;
        -:  214:}
        -:  215:
        -:  216:/**
        -:  217: * Decodes from binary buffer next TLV item and stores info
        -:  218: * inside iter element. It does not skip over stuffing.
        -:  219: *
        -:  220: * @return true if the iteration was successful
        -:  221: * @return false if the iteration failed, and iterator is unusable
        -:  222: */
      128:  223:bool tausch_decode_next( tausch_iter_t *iter )
        -:  224:{
      128:  225:    size_t tag = 0;
      128:  226:    size_t len = 0;
      128:  227:    iter->idx = iter->next;
      128:  228:    iter->val = iter->next;
        -:  229:    while( 1 )
        -:  230:    {
      131:  231:        tag = tausch_decode_vluint( iter );
     131*:  232:        if( ! tausch_iter_is_ok( iter ) ) return false;
      131:  233:        if( (tag & 3) == 3 )
        -:  234:        {
        -:  235:            // end of scope
       19:  236:            if( (iter->scope == 0) || (tag > 3) )
        -:  237:            {
        -:  238:                // at the root level we stay at the END marker
        -:  239:                // when tag part of the END is not 0, then it is also end of file
       16:  240:                tausch_iter_init( iter, iter->idx, iter->ebuf - iter->idx );
       16:  241:                return false;
        -:  242:            }
        3:  243:            iter->scope -= 1;
        3:  244:            iter->idx = iter->next;
        3:  245:            continue;
        -:  246:        }
      112:  247:        break;
        -:  248:    }
      112:  249:    len = 0;
      112:  250:    if( (tag & 1) == 1 )
        -:  251:    {
        -:  252:        // collection or variadic tag
        3:  253:        iter->scope += 1;
        -:  254:    }
      112:  255:    if( (tag & 2) == 2 )
        -:  256:    {
       68:  257:        len = tausch_decode_vluint( iter );
      68*:  258:        if( ! tausch_iter_is_ok( iter ) ) return false;
        -:  259:    }
      112:  260:    iter->lc = tag & 3;
      112:  261:    iter->tag = tag >> 2;
      112:  262:    iter->vlen = len;
      112:  263:    if( len > 0 )
        -:  264:    {
       68:  265:        if( ((iter->next + len) <= iter->next) || ((iter->next + len) > iter->ebuf) )
        -:  266:        {
        1:  267:            iter->val = NULL;
        1:  268:            iter->ebuf = NULL;
        1:  269:            return false;
        -:  270:        }
       67:  271:        iter->val = iter->next;
       67:  272:        iter->next += len; // idx may now equel to exbuf
        -:  273:    }
        -:  274:    else
        -:  275:    {
       44:  276:        iter->val = NULL;
        -:  277:    }
        -:  278:
      111:  279:    return true;
        -:  280:}
        -:  281:
        -:  282:/**
        -:  283: * Call this method when writing of the element has been finished.
        -:  284: * It does advance the iterator so that new element may be written
        -:  285: * right after the current element. Note that in case you are over-
        -:  286: * writing the existing binary TLV, then use decode_next() instead.
        -:  287: * This method is used when you are appending to the tlv, it does
        -:  288: * destroy the binary structure beneath.
        -:  289: *
        -:  290: * @return true if the iteration was successful
        -:  291: * @return false if the iteration failed, and iterator is unusable
        -:  292: */
        9:  293:bool tausch_write_next( tausch_iter_t *iter )
        -:  294:{
       9*:  295:    if( ! tausch_iter_is_ok( iter ) ) return false;
        9:  296:    iter->idx = iter->next;
        9:  297:    iter->val = iter->idx;
        9:  298:    iter->vlen = 0;
        9:  299:    iter->tag = 0;
        9:  300:    iter->lc= 0;
        -:  301:    // note: iter->scope stays as it is
        9:  302:    return true;
        -:  303:}
        -:  304:
        -:  305:/**
        -:  306: * Advance the iterator to the element next item on the same scope
        -:  307: *
        -:  308: * @return true if the iteration was successful
        -:  309: * @return false if the iteration failed, and iterator is unusable
        -:  310: */
        6:  311:bool tausch_decode_to_next( tausch_iter_t *iter )
        -:  312:{
        6:  313:    uint16_t scope = iter->scope;
        -:  314:    do
        -:  315:    {
        6:  316:        if( ! tausch_decode_next( iter ) ) return false;
       4*:  317:        if( ! tausch_iter_is_ok( iter ) ) return false;
        -:  318:    }
        4:  319:    while( iter->scope > scope );
        4:  320:    return true;
        -:  321:}
        -:  322:
        -:  323:
        -:  324:/**
        -:  325: * Advance the iterator to the element next item after end of current scope
        -:  326: *
        -:  327: * @return true if the iteration was successful
        -:  328: * @return false if the iteration failed, and iterator is unusable
        -:  329: */
        9:  330:bool tausch_decode_to_end( tausch_iter_t *iter )
        -:  331:{
        9:  332:    uint16_t scope = iter->scope;
        -:  333:    do
        -:  334:    {
       48:  335:        if( ! tausch_decode_next( iter ) )
        -:  336:        {
       8*:  337:            if( ! tausch_iter_is_ok( iter ) ) return false;
        8:  338:            else return true; // EOF
        -:  339:        }
        -:  340:    }
       40:  341:    while( iter->scope >= scope );
        1:  342:    return true;
        -:  343:}
        -:  344:
        -:  345:/**
        -:  346: * Advance the iterator to the next stuffing in the scope or next element
        -:  347: * after end of scope or to the EOF
        -:  348: *
        -:  349: * @return true if the iteration was successful
        -:  350: * @return false if the iteration failed, and iterator is unusable
        -:  351: */
        3:  352:bool tausch_decode_to_stuffing( tausch_iter_t *iter )
        -:  353:{
        3:  354:    uint16_t scope = iter->scope;
        -:  355:    do
        -:  356:    {
        6:  357:        if( ! tausch_decode_next( iter ) )
        -:  358:        {
       1*:  359:            if( ! tausch_iter_is_ok( iter ) ) return false;
        1:  360:            else return true; // EOF
        -:  361:        }
        5:  362:        if( (iter->tag == 0) && ( iter->lc != 1) && (iter->scope == scope) )
        -:  363:        {
        -:  364:            // stuffing has been found
        1:  365:            return true;
        -:  366:        }
        -:  367:    }
        4:  368:    while( iter->scope >= scope );
        1:  369:    return false;
        -:  370:}
        -:  371:
        -:  372:/**
        -:  373: * Advance the iterator to the next tag in the scope or next element
        -:  374: * after end of scope
        -:  375: *
        -:  376: * @arg tag - the tag that is looked for
        -:  377: *
        -:  378: * @return true if the iteration was successful
        -:  379: * @return false if the iteration failed, and iterator is unusable
        -:  380: */
       14:  381:bool tausch_decode_to_tag( tausch_iter_t *iter, size_t tag )
        -:  382:{
       14:  383:    uint16_t scope = iter->scope;
        -:  384:    do
        -:  385:    {
       64:  386:        if( ! tausch_decode_next( iter ) )
        -:  387:        {
       3*:  388:            if( ! tausch_iter_is_ok( iter ) ) return false;
        3:  389:            else return false; // EOF the tag was not found
        -:  390:        }
      61*:  391:        if( ! tausch_iter_is_ok( iter ) ) return false;
       61:  392:        if( (iter->tag == tag) && (iter->lc != 3) && ( (iter->scope - (iter->lc == 1)) == scope) )
        -:  393:        {
        -:  394:            // stuffing has been found
       10:  395:            return true;
        -:  396:        }
        -:  397:    }
       51:  398:    while( iter->scope >= scope );
        1:  399:    return false;
        -:  400:}
        -:  401:
        -:  402:
        -:  403:/**
        -:  404: * Turn the element pointed by iterator into stuffing.
        -:  405: * If the iterator is incomplete, then it creates.
        -:  406: *
        -:  407: * @arg len - the amount of bytes to write.
        -:  408: *
        -:  409: * @return true if the stuffing was successful.
        -:  410: * @return false if the stuffing was unsuccessful.
        -:  411: */
        3:  412:bool tausch_write_stuffing( tausch_iter_t *iter, size_t len )
        -:  413:{
        -:  414:    // FIXME: check if the usage of this method matches what it does, like what happens with idx
       3*:  415:    if( ! tausch_iter_is_ok( iter ) ) return false;
        3:  416:    size_t totlen = iter->next - iter->idx;
        3:  417:    tausch_iter_t cpy = *iter; // copy the original iterator
        3:  418:    bool is_eof = tausch_buf_is_eof( iter->idx );
        3:  419:    if( ! tausch_iter_is_complete( iter ) )
        -:  420:    {
        -:  421:        // the iterator is incomplete
        3:  422:        totlen =len;
        -:  423:    }
        3:  424:    bool finalize( bool rv )
        -:  425:    {
        3:  426:        iter->tag = 0;
       3*:  427:        if( !rv ) *iter = cpy;
       3*:  428:        if( is_eof && (iter->next < iter->ebuf) ) tausch_format_buf( iter->next );
        3:  429:        return rv;
        -:  430:    }
       3*:  431:    if( totlen < 1 ) return finalize( false );
       3*:  432:    if( ((iter->idx + totlen) <= iter->idx) || ((iter->idx + totlen) > iter->ebuf) ) return finalize( false );
        3:  433:    iter->next = iter->idx;
        3:  434:    iter->val = iter->next;
        3:  435:    size_t tlv = 0;
        3:  436:    if( totlen == 1 )
        -:  437:    {
       1*:  438:        if( ! tausch_encode_vluint( iter, tlv ) ) return finalize( false );
        1:  439:        iter->val = NULL;
        -:  440:    }
        -:  441:    else
        -:  442:    {
        2:  443:        tlv = 2;
       2*:  444:        if( ! tausch_encode_vluint( iter, tlv ) ) return finalize( false );
        2:  445:        tlv = totlen - (size_t)iter->next + (size_t)iter->idx;
        2:  446:        size_t lv  = tausch_vluint_len( tlv ) , xv = tlv;
        -:  447:        // find the amount of exact data
        2:  448:        do { xv =tlv - lv; lv = tausch_vluint_len( xv ); } while( (xv+lv) != tlv );
       2*:  449:        if( ! tausch_encode_vluint( iter, xv ) ) return finalize( false );
        2:  450:        iter->val = iter->next;
        2:  451:        tlv = totlen - (size_t)iter->next + (size_t)iter->idx;
        2:  452:        memset( iter->next, 0, tlv );
        -:  453:    }
        3:  454:    iter->next = iter->idx + totlen;
        3:  455:    return finalize( true );
        -:  456:}
        -:  457:
        -:  458:
        -:  459:/**
        -:  460: * Open new scope on the binary stream. Scopes are COLLECTION or VARIADIC
        -:  461: *
        -:  462: * @arg iter - the iterator where to append the scope
        -:  463: * @arg tag - the tag of the scope
        -:  464: *
        -:  465: * @return false on failure
        -:  466: * @return true on success
        -:  467: */
        2:  468:bool tausch_write_scope( tausch_iter_t *iter, size_t tag )
        -:  469:{
       2*:  470:    if( !tausch_iter_is_ok( iter ) ) return false;
       2*:  471:    if( tausch_iter_is_complete( iter ) ) return false;   // scope can only be appended
        -:  472:    if( iter->scope == ~(typeof(iter->scope))0 ) return false;   // no more scopes can be added
        2:  473:    size_t k = tag;
        2:  474:    k <<= 2;
        2:  475:    k += 1;
        2:  476:    bool is_eof = tausch_buf_is_eof( iter->idx );
        2:  477:    if( !tausch_encode_vluint( iter, k ) || (iter->next >= iter->ebuf) )
        -:  478:    {
        1:  479:        iter->next = iter->idx;
        1:  480:        if( is_eof && (iter->next < iter->ebuf) ) tausch_format_buf( iter->next );
        1:  481:        return false;
        -:  482:    }
        1:  483:    if( is_eof && (iter->next < iter->ebuf) ) tausch_format_buf( iter->next );
        1:  484:    iter->val = NULL;
        1:  485:    iter->lc = 1;
        1:  486:    iter->scope += 1;
        1:  487:    iter->tag = tag;
        1:  488:    return true;
        -:  489:}
        -:  490:
        -:  491:/**
        -:  492: * Close lastly open scope
        -:  493: *
        -:  494: * @arg iter - the iterator where to append the scope
        -:  495: *
        -:  496: * @return false on failure
        -:  497: * @return true on success
        -:  498: */
        1:  499:bool tausch_write_end( tausch_iter_t *iter )
        -:  500:{
       1*:  501:    if( !tausch_iter_is_ok( iter ) ) return false;
       1*:  502:    if( tausch_iter_is_complete( iter ) ) return false;   // end of scope can only be appended
       1*:  503:    if( iter->scope <= 0 ) return false;   // nothing to close
        1:  504:    size_t k = 3;
        1:  505:    bool is_eof = tausch_buf_is_eof( iter->idx );
        1:  506:    if( !tausch_encode_vluint( iter, k ) || (iter->next >= iter->ebuf) )
        -:  507:    {
    #####:  508:        iter->next = iter->idx;
    #####:  509:        if( is_eof && (iter->next < iter->ebuf) ) tausch_format_buf( iter->next );
    #####:  510:        return false;
        -:  511:    }
        1:  512:    if( is_eof && (iter->next < iter->ebuf) ) tausch_format_buf( iter->next );
        1:  513:    iter->val = NULL;
        1:  514:    iter->lc = 3;
        1:  515:    iter->scope -= 1;
        1:  516:    iter->tag = ~0;
        1:  517:    return true;
        -:  518:}
        -:  519:
        -:  520:/**
        -:  521: * Read the iterator value field as BOOL
        -:  522: *
        -:  523: * @return true if the read was successful
        -:  524: * @return false if the read was unsuccessful
        -:  525: */
        4:  526:bool tausch_read_bool( tausch_iter_t *iter, bool *value )
        -:  527:{
       4*:  528:    if( ! tausch_iter_is_ok( iter ) ) return false;
       4*:  529:    if( ! tausch_iter_is_complete( iter ) ) return false;
       4*:  530:    if( value == NULL ) return false;
        4:  531:    if( tausch_iter_is_stuffing( iter ) )
        -:  532:    {
        1:  533:        *value = false;
        1:  534:        return true;
        -:  535:    }
        3:  536:    if( iter->vlen == 0 )
        -:  537:    {
        1:  538:        *value = true;
        1:  539:        return true;
        -:  540:    }
        3:  541:    else for( int i=0; i < iter->vlen; i++ )
        -:  542:    {
        2:  543:        if( iter->val[i] != 0 )
        -:  544:        {
        1:  545:            *value = true;
        1:  546:            return true;
        -:  547:        }
        -:  548:    }
        1:  549:    *value = false;
        1:  550:    return true;
        -:  551:}
        -:  552:
        -:  553:/**
        -:  554: * Write the iterator value field as BOOL.
        -:  555: * When the value is NULL then the value is considered true and it is stored
        -:  556: * in the field in shortest possible way (tag only). Otherwise as uint8_t
        -:  557: * or the entire existing field is filled with value.
        -:  558: *
        -:  559: * @arg iter - the iterator
        -:  560: * @arg value - pointer to value field, if NULL then it is considered true
        -:  561: *
        -:  562: * @return true if the read was successful
        -:  563: * @return false if the read was unsuccessful
        -:  564: */
        5:  565:bool tausch_write_bool( tausch_iter_t *iter, size_t tag, bool *value )
        -:  566:{
       5*:  567:    if( ! tausch_iter_is_ok( iter ) ) return false;
        5:  568:    bool val = true;
        5:  569:    if( value != NULL ) val = *value;
        5:  570:    bool is_eof = tausch_buf_is_eof( iter->idx );
        5:  571:    tausch_iter_t cpy = *iter;
        5:  572:    bool finalize( bool rv )
        -:  573:    {
       5*:  574:        if( !rv ) *iter = cpy;
        5:  575:        if( is_eof && (iter->next < iter->ebuf) ) tausch_format_buf( iter->next );
        5:  576:        return rv;
        -:  577:    }
        -:  578:
        5:  579:    if( ! tausch_iter_is_complete( iter ) )
        -:  580:    {
        -:  581:        // Note if you want to append it in non space saving way, then
        -:  582:        // before calling this method, do tausch_write_typX( iter, &tag, &value, 1 )
        2:  583:        if( ! value )
        -:  584:        {
        -:  585:            // Append the element in a space saving way.
        1:  586:            size_t tlv = tag << 2;
       1*:  587:            if( ! tausch_encode_vluint( iter, tlv ) ) return finalize( false );
        1:  588:            iter->val = NULL;
        -:  589:        }
        -:  590:        else
        -:  591:        {
        -:  592:            // Write the item as uint8_t
       1*:  593:            if( ! tausch_write_typX( iter, tag, (uint8_t*)&val, sizeof(uint8_t))) return finalize( false );
        -:  594:        }
        2:  595:        iter->tag = tag;
        2:  596:        return finalize( true );
        -:  597:    }
        -:  598:    else
        -:  599:    {
        -:  600:        // the iterator already has been read, we are overwriting
        3:  601:        size_t totlen = iter->next - iter->idx;
        3:  602:        tausch_iter_t tm = *iter;
        3:  603:        tm.next = tm.idx;
        3:  604:        tm.val = tm.next;
        3:  605:        tm.ebuf = iter->next;
        3:  606:        size_t bytes = tausch_vluint_len( tag << 2 );
        3:  607:        if( totlen < bytes )
        -:  608:        {
    #####:  609:            return finalize( false ); // can not encode, not enough space in it
        -:  610:        }
        3:  611:        else if( totlen <= (bytes+1) )
        -:  612:        {
        -:  613:            // only true value can be encoded
        2:  614:           if( val == true )
        -:  615:           {
        1:  616:               size_t tlv = tag << 2;
       1*:  617:               if( ! tausch_encode_vluint( &tm, tlv+2 ) ) return finalize( false );
        -:  618:               // append the single byte, length 0
        1:  619:               if( totlen > bytes )
        -:  620:               {
    #####:  621:                   *(tm.next++) = 0x00;
        -:  622:               }
        1:  623:               iter->tag = tag;
        -:  624:           }
        -:  625:           else // val == false
        -:  626:           {
       1*:  627:               if( ! tausch_write_stuffing( &tm, totlen ) ) return finalize( false );
        1:  628:               iter->tag = 0;
        -:  629:           }
        2:  630:           return finalize( true );
        -:  631:        }
        -:  632:        else
        -:  633:        {
        -:  634:            // full TLV has to be written
        1:  635:            size_t tlv = tag << 2;
        1:  636:            tlv += 2;   // encode the len too
       1*:  637:            if( ! tausch_encode_vluint( &tm, tlv ) ) return finalize( false );
        1:  638:            tlv = totlen - bytes - 1;   // now: tlv is length
       1*:  639:            if( ! tausch_encode_vluint( &tm, tlv ) ) return finalize( false );
        2:  640:            while( tm.next < tm.ebuf )
        -:  641:            {
        1:  642:                *(tm.next++) = val;
        1:  643:                val = 0;
        -:  644:            }
        1:  645:            iter->tag = tag;
        1:  646:            return finalize( true );
        -:  647:        }
        -:  648:    }
        -:  649:
        -:  650:    //return finalize( true );
        -:  651:}
        -:  652:
        -:  653:
        -:  654:/**
        -:  655: * Read the iterator value field as any finite value
        -:  656: *
        -:  657: * @arg iter - the iterator
        -:  658: * @arg value - pointer to the value to copy the value over
        -:  659: * @arg len - length of the finite value memory field
        -:  660: *
        -:  661: * @return 0 on failure
        -:  662: * @return number of bytes read out
        -:  663: */
        4:  664:size_t tausch_read_typX( tausch_iter_t *iter, uint8_t *value, size_t len )
        -:  665:{
       4*:  666:    if( ! tausch_iter_is_ok( iter ) ) return 0;
       4*:  667:    if( value == NULL ) return 0;
       4*:  668:    if( iter->vlen != len ) return 0;
        4:  669:    memcpy( (void*)value, (void*)iter->val, len);
        4:  670:    return len;
        -:  671:}
        -:  672:
        -:  673:/**
        -:  674: * Write to the location of iterator any finite value. When the iter already
        -:  675: * contains an element, it does verify it the tags match and the lengths match.
        -:  676: * When value is NULL, and length is 0 a null item will be written.
        -:  677: * When value is NULL and length is >0 all value field is replaced with 0x00
        -:  678: *
        -:  679: * @arg iter - the iterator
        -:  680: * @arg tag - the tag value
        -:  681: * @arg value - pointer to the value to copy the value from
        -:  682: * @arg len - length of the finite value memory field
        -:  683: *
        -:  684: * @return 0 on failure
        -:  685: * @return number of value bytes written, for null return 1
        -:  686:*/
       20:  687:size_t tausch_write_typX( tausch_iter_t *iter, size_t tag, uint8_t *value, size_t len )
        -:  688:{
      20*:  689:    if( ! tausch_iter_is_ok( iter ) ) return 0;
       20:  690:    bool is_eof = tausch_buf_is_eof( iter->idx );
       20:  691:    tausch_iter_t cpy = *iter;
       18:  692:    size_t finalize( size_t rv )
        -:  693:    {
       18:  694:        if( !rv ) *iter = cpy;
       18:  695:        if( is_eof && (iter->next < iter->ebuf) ) tausch_format_buf( iter->next );
       18:  696:        return rv;
        -:  697:    }
       20:  698:    if( tausch_iter_is_complete( iter ) )
        -:  699:    {
        -:  700:        // we are overwriting the meomry
        8:  701:        if( iter->tag != tag ) return finalize( 0 );
        7:  702:        if( value != NULL )
        -:  703:        {
        -:  704:            // simple overwrite of the value
        4:  705:            if( iter->vlen != len ) return finalize( 0 ); // the length must match
        1:  706:            memcpy( iter->val, value, len );
        1:  707:            return len;
        -:  708:        }
        3:  709:        else if( len > 0 )
        -:  710:        {
        -:  711:            // we are zeroing the  value field
       1*:  712:            if( iter->vlen != len ) return finalize( 0 ); // lengths must match in this case
        1:  713:            memset( iter->val, 0x00, len );
        1:  714:            return len;
        -:  715:        }
        -:  716:        else
        -:  717:        {
        -:  718:            // we are turning the item to null in place
       2*:  719:            if( iter->vlen == 0 ) return finalize( 1 ); // it is already null
        2:  720:            tag <<= 2;
        -:  721:            // start new iterator for overwriting
        2:  722:            tausch_iter_t tm = *iter;
        2:  723:            tm.next = tm.idx;
        2:  724:            tm.val = tm.next;
        2:  725:            tm.ebuf = iter->next;
        2:  726:            tm.lc = 0;
        2:  727:            tm.vlen = 0;
       2*:  728:            if( ! tausch_encode_vluint( &tm, tag ) ) return finalize( 0 );
        2:  729:            iter->next = tm.next;
        2:  730:            iter->val = NULL;
        2:  731:            iter->vlen = 0;
        2:  732:            iter->lc = 0;
        -:  733:            // fill the remainder with stuffing
        2:  734:            size_t stlen = tm.ebuf - tm.next;
        2:  735:            tm.idx = tm.next;
       2*:  736:            if( ! tausch_write_stuffing( &tm, stlen ) ) return finalize( 0 );
        2:  737:            return finalize( 1 );
        -:  738:        }
        -:  739:    }
       12:  740:    else if ( ! tausch_iter_is_clean( iter ) )
        -:  741:    {
    #####:  742:        return finalize( 0 ); // if the iter is not clean we can not write
        -:  743:    }
        -:  744:    else
        -:  745:    {
        -:  746:        // we are appending to the stream
       12:  747:        iter->tag = tag;
       12:  748:        tag <<= 2;
       12:  749:        if( len > 0 ) tag += 2;
       12:  750:        iter->lc = tag & 3;
        -:  751:        // write the tag
      12*:  752:        if( ! tausch_encode_vluint(iter, tag) ) return finalize( 0 );
       12:  753:        if( len == 0 )
        -:  754:        {
        -:  755:            // null value was requested
        3:  756:            iter->val = NULL;
        3:  757:            iter->vlen = 0;
        3:  758:            return finalize( 1 );
        -:  759:        }
        -:  760:        // write the len
       9*:  761:        if( ! tausch_encode_vluint(iter, len) ) return finalize( 0 );
        -:  762:        // write the value
       9*:  763:        if( ((iter->next + len) <= iter->next) || ((iter->next + len) > iter->ebuf) ) return finalize( 0 ); // overflow
        9:  764:        if( value != NULL )
        -:  765:        {
        8:  766:            memcpy( iter->next, value, len );
        -:  767:        }
        -:  768:        else
        -:  769:        {
        1:  770:            memset( iter->next, 0x00, len );
        -:  771:        }
        9:  772:        iter->next += len;
        9:  773:        iter->vlen = len;
        9:  774:        return finalize( len );
        -:  775:    }
        -:  776:}
        -:  777:
        -:  778:/**
        -:  779: * Read the iterator value field as UINT-X
        -:  780: *
        -:  781: * @return 0 unsuccessful
        -:  782: * @return number of bytes read out
        -:  783: */
        1:  784:size_t tausch_read_blob( tausch_iter_t *iter, tausch_blob_t *value )
        -:  785:{
       1*:  786:    if( ! tausch_iter_is_ok( iter ) ) return 0;
       1*:  787:    if( value == NULL ) return 0;
       1*:  788:    if( value->len < iter->vlen ) return 0;
        1:  789:    memcpy( (void*)value->buf, (void*)iter->val, iter->vlen);
        1:  790:    return iter->vlen;
        -:  791:}
        -:  792:
        -:  793:/**
        -:  794: * Write the blob into the value field.
        -:  795: * When overwriting the blob size must match with the blob size in binary
        -:  796: *
        -:  797: * @arg iter - the iterator
        -:  798: * @arg tag - the tag value
        -:  799: * @arg value - the pointer to blob
        -:  800: *
        -:  801: * @return 0 on failure
        -:  802: * @return size written on success
        -:  803: */
        3:  804:size_t tausch_write_blob( tausch_iter_t *iter, size_t tag, tausch_blob_t *value )
        -:  805:{
        3:  806:    if( value == NULL )
        -:  807:    {
        1:  808:        return tausch_write_typX( iter, tag, NULL, 0 );
        -:  809:    }
        2:  810:    return tausch_write_typX( iter, tag, value->buf, value->len );
        -:  811:}
        -:  812:
        -:  813:/**
        -:  814: * Write the string into the value field.
        -:  815: * When overwriting the string size must be smaller equal to the binary size.
        -:  816: * When string is shorter, it is padded with zeroes.
        -:  817: *
        -:  818: * @arg iter - the iterator
        -:  819: * @arg tag - the tag value
        -:  820: * @arg value - the pointer to string
        -:  821: *
        -:  822: * @return 0 on failure
        -:  823: * @return size written on success
        -:  824: */
        2:  825:size_t tausch_write_utf8( tausch_iter_t *iter, size_t tag, char *value )
        -:  826:{
        2:  827:    if( value == NULL )
        -:  828:    {
    #####:  829:        return tausch_write_typX( iter, tag, NULL, 0 );
        -:  830:    }
       2*:  831:    if( ! tausch_iter_is_ok( iter ) ) return 0;
        2:  832:    size_t stlen = strlen( value );
        2:  833:    if( tausch_iter_is_complete( iter ) )
        -:  834:    {
       1*:  835:        if( tausch_iter_is_null( iter ) ) return 0; // the iter is null
       1*:  836:        if( iter->tag != tag ) return 0; // the tag must be the same
       1*:  837:        if( stlen > iter->vlen ) return 0; // the string does not fill in
        1:  838:        memcpy( iter->val, value, stlen );
        1:  839:        memset( iter->val + stlen, 0x00, iter->vlen-stlen );
        1:  840:        return iter->vlen;
        -:  841:    }
        -:  842:    else
        -:  843:    {
        1:  844:        return tausch_write_typX( iter, tag, (uint8_t*)value, stlen );
        -:  845:    }
        -:  846:}
        -:  847:
        -:  848:
        -:  849:/**
        -:  850: * Get the length of the TLV value field
        -:  851: */
        4:  852:size_t tausch_iter_vlen( tausch_iter_t *iter )
        -:  853:{
       4*:  854:    if( ! tausch_iter_is_ok( iter ) ) return 0;
        4:  855:    if( iter->val == NULL ) return 0;
        3:  856:    if( tausch_iter_is_complete( iter ) )
        2:  857:        return iter->vlen;
        1:  858:    return 0;
        -:  859:}
        -:  860:
        -:  861:
        -:  862:
